name: Code style and test

on:
  push:
    paths-ignore:
      - pyproject.toml
      - setup.cfg
      - CHANGELOG.md
  workflow_dispatch: {}

jobs:
  unit-tests:
    name: Code style & unit tests
    runs-on: ubuntu-latest
    env:
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
    steps:
      - name: Add PYTHONUSERBASE to PATH
        id: add-pythonuserbase
        run: |
          echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Set up Python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: ${{ steps.python.outputs.python-version }}-full-${{ secrets.CACHE_KEY }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ steps.python.outputs.python-version }}-full-${{ secrets.CACHE_KEY }}-
      - name: Install dependencies
        run: |
          python -m pip install -U poetry pip wheel
          poetry config virtualenvs.create false
          poetry install -n
          python -m pip install -U boto3-stubs botocore-stubs
      - name: Lint
        run: |
          python -m flake8 mypy_boto3_builder
          python -m mypy mypy_boto3_builder
      - name: Test
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          python -m pytest

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    env:
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
    steps:
      - name: Add PYTHONUSERBASE to PATH
        id: add-pythonuserbase
        run: |
          echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Set up Python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: ${{ steps.python.outputs.python-version }}-full-${{ secrets.CACHE_KEY }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ steps.python.outputs.python-version }}-full-${{ secrets.CACHE_KEY }}-
      - name: Install dependencies
        run: |
          python -m pip install -U poetry pip wheel
          poetry config virtualenvs.create false
          poetry install -n
          python -m pip install -U boto3-stubs botocore-stubs
          sudo npm install -g pyright
      - name: Integration tests
        run: |
          python scripts/integration.py


  armv64_py38_job:
      name: Build and Test for arm64 with py38
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt-get -y install python3 python3-pip python3-venv curl git && \
              ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
              python3 -m pip install virtualenv && python3 -m venv py38-venv && \
              source py38-venv/bin/activate && \
              python3 --version && \
              uname -m && \
              whoami && \
              pwd && \
              ls && \
              python -m pip install -U poetry pip wheel && \
              poetry config virtualenvs.create false && \
              poetry install -n && \
              python -m pip install -U boto3-stubs botocore-stubs && \
              python -m pytest && \
              npm install -g pyright && \
              python scripts/integration.py && \
              deactivate'
